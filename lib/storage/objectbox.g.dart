// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/note.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7152916193541364250),
      name: 'Note',
      lastPropertyId: const IdUid(8, 8843974417787442003),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(id: const IdUid(1, 5239256797785164124), name: 'id', type: 6, flags: 1),
        ModelProperty(id: const IdUid(2, 1604043151729150206), name: 'uuid', type: 9, flags: 0),
        ModelProperty(id: const IdUid(3, 6097135526262374221), name: 'title', type: 9, flags: 0),
        ModelProperty(id: const IdUid(4, 4638458304001958326), name: 'body', type: 9, flags: 0),
        ModelProperty(id: const IdUid(5, 4801193256494258808), name: 'syncAction', type: 9, flags: 0),
        ModelProperty(id: const IdUid(6, 641791225505873212), name: 'syncStatus', type: 1, flags: 0),
        ModelProperty(id: const IdUid(7, 8189825838559622558), name: 'createdAt', type: 10, flags: 0),
        ModelProperty(id: const IdUid(8, 8843974417787442003), name: 'color', type: 9, flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 7152916193541364250),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Note: EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          final syncActionOffset = fbb.writeString(object.syncAction);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, bodyOffset);
          fbb.addOffset(4, syncActionOffset);
          fbb.addBool(5, object.syncStatus);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(7, colorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuidParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
          final bodyParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, '');
          final colorParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, '');
          final syncActionParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, '');
          final syncStatusParam = const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final createdAtParam =
              DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = Note(
              id: idParam,
              uuid: uuidParam,
              title: titleParam,
              body: bodyParam,
              color: colorParam,
              syncAction: syncActionParam,
              syncStatus: syncStatusParam,
              createdAt: createdAtParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// see [Note.uuid]
  static final uuid = QueryStringProperty<Note>(_entities[0].properties[1]);

  /// see [Note.title]
  static final title = QueryStringProperty<Note>(_entities[0].properties[2]);

  /// see [Note.body]
  static final body = QueryStringProperty<Note>(_entities[0].properties[3]);

  /// see [Note.syncAction]
  static final syncAction = QueryStringProperty<Note>(_entities[0].properties[4]);

  /// see [Note.syncStatus]
  static final syncStatus = QueryBooleanProperty<Note>(_entities[0].properties[5]);

  /// see [Note.createdAt]
  static final createdAt = QueryIntegerProperty<Note>(_entities[0].properties[6]);

  /// see [Note.color]
  static final color = QueryStringProperty<Note>(_entities[0].properties[7]);
}
